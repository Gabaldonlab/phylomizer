#!/usr/bin/python
import os
import sys
import argparse
from module_trees import phylogenetic_trees
from module_utils import readConfig, lookForDirectory, lookForFile, printConfig

if __name__ == "__main__":

  parser = argparse.ArgumentParser()

  parser.add_argument("-i", "--in", dest = "inFile", type = str, default = None,
    help = "Input file containing the query sequence/s")

  parser.add_argument("-c", "--config", dest = "configFile", default = None, \
    type = str, help = "Input configuration file")

  parser.add_argument("-o", "--out", dest = "outFolder", type = str, default = \
    ".", help = "Output folder where all generated files will be dumped")

  parser.add_argument("-p", "--prefix", dest = "prefix", type = str, default = \
    "", help = "Set the prefix for all output files generated by the pipeline")

  parser.add_argument("-r", "--replace", dest = "replace", default = False, \
    action = "store_true", help = "Over-write any previously generated file")

  ## If no arguments are given, just show the help and finish
  if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

  args = parser.parse_args()

  ## Assign input parameters directly to the dictionary which will contain all
  ## current run configuration.
  parameters = {}
  parameters.setdefault("replace", args.replace)

  ## Assign which step is being executed. It is useful to know whether the log
  ## file should be replaced or not - even when the flag "replace" is set
  parameters.setdefault("step", 0)

  ## Check parameters related to files / directories
  if not lookForFile(args.inFile):
    sys.exit(("ERROR: Check input SEQUENCES file '%s'") % (args.inFile))
  parameters.setdefault("in_file", args.inFile)

  if not lookForFile(args.configFile):
    sys.exit(("ERROR: Check input CONFIG file '%s'") % (args.configFile))
  parameters.setdefault("config_file", args.configFile)

  if not lookForDirectory(args.outFolder):
    sys.exit(("ERROR: Check output folder '%s'") % (args.outFolder))
  parameters.setdefault("out_directory", os.path.abspath(args.outFolder))

  ## Set output files prefix name depending on input user selection
  tag = os.path.split(args.inFile)[1].split(".")[0]
  parameters.setdefault("prefix", args.prefix if args.prefix else tag)

  ## Read the other parameters from the input config file
  parameters.update(readConfig(parameters["config_file"]))

  ## Print all set-up parameters
  printConfig(parameters)

  ## Reconstruct the Multiple Sequence Alignment for the input Sequences
  phylogenetic_trees(parameters)


  #~ # ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** ****
  #~ PhylogeneticTrees(parameters["phyml"], parameters["nj_parameters"], "nj",
    #~ parameters["inFile"], parameters["outDirec"], parameters["evol_models"],
    #~ parameters["verbose"], parameters["replace"])
#~
  #~ rank = SortingLKs(parameters["inFile"], parameters["outDirec"], "nj",
    #~ parameters["evol_models"], parameters["verbose"])
#~
  #~ rank = ' ' . join(rank[:int(parameters["numb_models"])])
#~
  #~ PhylogeneticTrees(parameters["phyml"], parameters["ml_parameters"], "ml",
    #~ parameters["inFile"], parameters["outDirec"], rank, parameters["verbose"],
    #~ parameters["replace"])
#~
  #~ SortingLKs(parameters["inFile"], parameters["outDirec"], "ml", rank,
    #~ parameters["verbose"])
